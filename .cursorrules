# 在线动画项目 Cursor 规则

## 项目概述
这是一个基于 Laravel + Vue3 + TypeScript 的全栈Web应用，专注于小说到动画视频的转换和分镜画板制作。

## 技术栈
- **后端**: Laravel 12+, MySQL, Filament Admin Panel
- **前端**: Vue 3 + TypeScript, Vite, Shadcn/ui + Tailwind CSS
- **画布**: Fabric.js + Canvas API
- **动画**: Anime.js, js-yaml

## 代码风格规范

### 后端 (PHP/Laravel)
- 遵循 PSR-12 编码标准
- 使用 Laravel 命名约定
- 控制器方法使用驼峰命名法
- 模型使用单数形式，数据表使用复数形式
- 使用 Eloquent ORM 进行数据库操作

### 前端 (Vue3/TypeScript)
- 使用 `<script setup lang="ts">` 语法
- 组件使用 PascalCase 命名，文件名使用 kebab-case
- 使用 Composition API
- 严格的 TypeScript 类型检查
- 明确的 Props 和 Emits 类型定义

## 重要规则

### 1. 分页规范
**禁止使用** Laravel 的 `paginate()` 方法，统一使用 `offset` 和 `limit` 进行分页。

```php
// ✅ 正确
$limit = $request->get('limit', 20);
$offset = $request->get('offset', 0);
$data = $query->offset($offset)->limit($limit)->get();

// ❌ 禁止
$data = $query->paginate($perPage);
```

### 2. UI主题使用规范
**禁止使用**自定义颜色值，必须使用框架提供的主题变量。

```css
/* ✅ 正确 */
.component {
  @apply bg-background text-foreground;
  @apply border-border hover:bg-accent;
  @apply text-primary hover:text-primary/80;
}

/* ❌ 禁止 */
.component {
  @apply bg-white text-gray-900;
  @apply border-gray-300 hover:bg-blue-50;
}
```

### 3. 动画脚本规范
- 使用 YAML 格式编写动画脚本
- 通过 `js-yaml` 库解析
- 支持多种动画格式（新格式优先，旧格式兼容）

## 项目结构

### 后端目录
```
app/
├── Http/Controllers/Api/     # API控制器
├── Http/Controllers/Auth/    # 认证控制器
├── Models/                   # Eloquent模型
└── Providers/               # 服务提供者
```

### 前端目录
```
resources/js/
├── components/ui/            # 基础UI组件
├── components/storyboard/    # 分镜画板组件
├── composables/             # Vue组合式函数
├── lib/                     # 工具库
├── pages/                   # 页面组件
└── types/                   # TypeScript类型定义
```

## 数据库规范
- 表名使用复数形式 (users, novels, chapters)
- 主键统一使用 `id` (bigint, auto_increment)
- 外键字段使用 `{table}_id` 格式
- 时间戳字段使用 `created_at`, `updated_at`

## API响应格式
```json
{
    "success": true,
    "data": [],
    "message": "操作成功"
}
```

## 文件上传支持
- **图片**: jpeg, jpg, png, gif, webp
- **视频**: mp4, avi, mov, wmv, flv
- **音频**: mp3, wav, ogg, m4a
- **文档**: pdf, doc, docx, xls, xlsx, ppt, pptx, txt

## 开发命令
- 前端开发: `npm run dev`
- 后端开发: `php artisan serve`
- 队列处理: `php artisan queue:listen`
- 前端构建: `npm run build`

## 注意事项
- 所有代码必须通过 TypeScript 类型检查
- 使用 Prettier + ESLint 进行代码格式化
- 遵循语义化 Git 提交规范
- 优先使用项目提供的组件库和工具函数

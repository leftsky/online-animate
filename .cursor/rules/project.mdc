---
alwaysApply: true
---


# 在线动画项目开发规则

## 项目概述
基于Laravel + Vue3 + TypeScript的全栈Web应用，专注于小说到动画视频的转换和分镜画板制作。

## 技术栈
- **后端**: Laravel 12+, MySQL, Filament Admin Panel
- **前端**: Vue 3 + TypeScript, Vite, Shadcn/ui + Tailwind CSS
- **画布**: Fabric.js + Canvas API
- **动画**: Anime.js, js-yaml

## 核心开发规范

### 1. 后端规范 (PHP/Laravel)
- 遵循PSR-12编码标准
- 控制器方法使用驼峰命名法
- 模型使用单数形式，数据表使用复数形式
- 使用Eloquent ORM进行数据库操作

### 2. 前端规范 (Vue3/TypeScript)
- 使用 `<script setup lang="ts">` 语法
- 组件使用PascalCase命名，文件名使用kebab-case
- 使用Composition API

#### TypeScript使用策略（分层策略）
**强制使用TypeScript**：
- 工具库 (`lib/` 目录)
- 类型定义 (`types/` 目录)
- 核心UI组件 (`components/ui/` 目录)
- 组合式函数 (`composables/` 目录)
- 业务组件 (`components/storyboard/` 等)

**使用JavaScript**：
- 页面组件 (`pages/` 目录) - 统一使用JavaScript
- 页面路由文件
- 页面级别的业务逻辑

**注意**: 使用JavaScript的页面必须通过ESLint检查，确保代码质量。

### 3. 数据库规范
- 表名使用复数形式 (users, novels, chapters)
- 主键统一使用 `id` (bigint, auto_increment)
- 外键字段使用 `{table}_id` 格式
- 时间戳字段使用 `created_at`, `updated_at`

## 重要规则

### 1. 分页规范
**禁止使用** Laravel的 `paginate()` 方法，统一使用 `offset` 和 `limit` 进行分页。

```php
// ✅ 正确
$limit = $request->get('limit', 20);
$offset = $request->get('offset', 0);
$data = $query->offset($offset)->limit($limit)->get();

// ❌ 禁止
$data = $query->paginate($perPage);
```

### 2. UI主题使用规范
**禁止使用**自定义颜色值，必须使用框架提供的主题变量。

```css
/* ✅ 正确 */
.component {
  @apply bg-background text-foreground;
  @apply border-border hover:bg-accent;
  @apply text-primary hover:text-primary/80;
}

/* ❌ 禁止 */
.component {
  @apply bg-white text-gray-900;
  @apply border-gray-300 hover:bg-blue-50;
}
```

### 3. 动画脚本规范
- 使用YAML格式编写动画脚本
- 通过 `js-yaml` 库解析
- 支持多种动画格式（新格式优先，旧格式兼容）

### 4. API接口定义规范
**重要**: 前端API调用直接使用 `resources/js/utils/api.ts` 中提供的 `apiGet`、`apiPost`、`apiPut`、`apiDelete` 方法，**禁止在api.ts中定义具体的业务接口**。

```typescript
// ✅ 正确的API调用方式
import { apiGet, apiPost, apiPut, apiDelete } from '@/utils/api'

// 获取小说列表
const getNovels = async (params: { limit?: number; offset?: number } = {}) => {
  const queryParams = new URLSearchParams()
  if (params.limit) queryParams.append('limit', String(params.limit))
  if (params.offset) queryParams.append('offset', String(params.offset))
  
  const url = `/novels${queryParams.toString() ? '?' + queryParams.toString() : ''}`
  return apiGet(url)
}

// 创建小说
const createNovel = async (data: any) => {
  return apiPost('/novels', data)
}
```

**禁止的API定义方式**:
```typescript
// ❌ 禁止在api.ts中定义具体业务接口
export const novelApi = {
  getList(): Promise<ApiResponse> {
    return apiGet('/novels')  // 禁止
  }
}

// ❌ 禁止在api.ts中定义具体的API方法
export const getNovels = () => {  // 禁止
  return apiGet('/novels')
}
```

### 5. 文件上传规范
**重要**: 所有文件上传必须使用 `resources/js/utils/api.ts` 中的 `uploadApi.uploadFile` 方法。

```typescript
// ✅ 正确的文件上传方式
import { uploadApi } from '@/utils/api'

// 上传文件
const uploadFile = async (file: File, options: { folder?: string } = {}) => {
  return uploadApi.uploadFile(file, options)
}

// 使用示例
const result = await uploadFile(file, { folder: 'novels' })
if (result.success) {
  console.log('上传成功:', result.data.url)
}
```

### 6. Toast通知使用规范
**重要**: 所有用户操作反馈必须使用 `useToast` 组合式函数，**禁止使用** `console.log` 或 `alert` 等原生方法。

```typescript
// ✅ 正确的Toast使用方式
import { useToast } from '@/composables/useToast'

const { toast } = useToast()

// 成功提示
toast.success('操作成功')

// 错误提示
toast.error('操作失败')

// 警告提示
toast.warning('请注意')

// 信息提示
toast.info('提示信息')
```

**禁止的使用方式**:
```typescript
// ❌ 禁止使用原生方法
console.log('操作成功')  // 禁止
alert('操作失败')        // 禁止
confirm('确认删除?')     // 禁止
```

### 7. 确认弹窗使用规范
**重要**: 所有需要用户确认的操作必须使用 `useConfirm` 组合式函数和 `ConfirmDialog` 组件，**禁止使用**原生的 `confirm()` 方法。

```typescript
// ✅ 正确的确认弹窗使用方式
import { useConfirm } from '@/composables/useConfirm'

const { confirm } = useConfirm()

// 删除确认
const handleDelete = async (item: any) => {
  const confirmed = await confirm({
    title: '确认删除',
    message: `确定要删除"${item.name}"吗？此操作不可逆。`,
    confirmText: '删除',
    cancelText: '取消',
    variant: 'destructive'
  })
  
  if (confirmed) {
    // 执行删除操作
    await deleteItem(item.id)
  }
}
```

**禁止的使用方式**:
```typescript
// ❌ 禁止使用原生confirm方法
if (!confirm('确定要删除吗？')) return  // 禁止
```

## 项目结构

### 后端目录
```
app/
├── Http/Controllers/Api/     # API控制器
├── Http/Controllers/Auth/    # 认证控制器
├── Models/                   # Eloquent模型
└── Providers/               # 服务提供者
```

### 前端目录
```
resources/js/
├── components/ui/            # 基础UI组件 (强制TS)
├── components/storyboard/    # 分镜画板组件 (强制TS)
├── composables/             # Vue组合式函数 (强制TS)
├── lib/                     # 工具库 (强制TS)
├── pages/                   # 页面组件 (使用JS)
└── types/                   # TypeScript类型定义 (强制TS)
```

## API响应格式
```json
{
    "success": true,
    "data": [],
    "message": "操作成功"
}
```

## 文件上传支持
- **图片**: jpeg, jpg, png, gif, webp
- **视频**: mp4, avi, mov, wmv, flv
- **音频**: mp3, wav, ogg, m4a
- **文档**: pdf, doc, docx, xls, xlsx, ppt, pptx, txt

## 开发命令
- 前端开发: `npm run dev`
- 后端开发: `php artisan serve`
- 队列处理: `php artisan queue:listen`
- 前端构建: `npm run build`

## 注意事项
- 使用TypeScript的代码必须通过类型检查
- 使用JavaScript的代码必须通过ESLint检查
- 使用Prettier + ESLint进行代码格式化
- 遵循语义化Git提交规范
- 优先使用项目提供的组件库和工具函数
- **页面组件统一使用JavaScript，业务组件统一使用TypeScript**

---

**注意**: 本规则文档会随着项目发展持续更新，所有开发人员应遵循最新版本的规范要求。
# 在线动画项目开发规则

## 项目概述
基于Laravel + Vue3 + TypeScript的全栈Web应用，专注于小说到动画视频的转换和分镜画板制作。

## 技术栈
- **后端**: Laravel 12+, MySQL, Filament Admin Panel
- **前端**: Vue 3 + TypeScript, Vite, Shadcn/ui + Tailwind CSS
- **画布**: Fabric.js + Canvas API
- **动画**: Anime.js, js-yaml

## 核心开发规范

### 1. 后端规范 (PHP/Laravel)
- 遵循PSR-12编码标准
- 控制器方法使用驼峰命名法
- 模型使用单数形式，数据表使用复数形式
- 使用Eloquent ORM进行数据库操作

### 2. 前端规范 (Vue3/TypeScript)
- 使用 `<script setup lang="ts">` 语法
- 组件使用PascalCase命名，文件名使用kebab-case
- 使用Composition API

#### TypeScript使用策略（分层策略）
**强制使用TypeScript**：
- 工具库 (`lib/` 目录)
- 类型定义 (`types/` 目录)
- 核心UI组件 (`components/ui/` 目录)
- 组合式函数 (`composables/` 目录)
- 业务组件 (`components/storyboard/` 等)

**使用JavaScript**：
- 页面组件 (`pages/` 目录) - 统一使用JavaScript
- 页面路由文件
- 页面级别的业务逻辑

**注意**: 使用JavaScript的页面必须通过ESLint检查，确保代码质量。

### 3. 数据库规范
- 表名使用复数形式 (users, novels, chapters)
- 主键统一使用 `id` (bigint, auto_increment)
- 外键字段使用 `{table}_id` 格式
- 时间戳字段使用 `created_at`, `updated_at`

## 重要规则

### 1. 分页规范
**禁止使用** Laravel的 `paginate()` 方法，统一使用 `offset` 和 `limit` 进行分页。

```php
// ✅ 正确
$limit = $request->get('limit', 20);
$offset = $request->get('offset', 0);
$data = $query->offset($offset)->limit($limit)->get();

// ❌ 禁止
$data = $query->paginate($perPage);
```

### 2. UI主题使用规范
**禁止使用**自定义颜色值，必须使用框架提供的主题变量。

```css
/* ✅ 正确 */
.component {
  @apply bg-background text-foreground;
  @apply border-border hover:bg-accent;
  @apply text-primary hover:text-primary/80;
}

/* ❌ 禁止 */
.component {
  @apply bg-white text-gray-900;
  @apply border-gray-300 hover:bg-blue-50;
}
```

### 3. 动画脚本规范
- 使用YAML格式编写动画脚本
- 通过 `js-yaml` 库解析
- 支持多种动画格式（新格式优先，旧格式兼容）

### 4. API接口定义规范
**重要**: 前端API调用直接使用 `resources/js/utils/api.ts` 中提供的 `apiGet`、`apiPost`、`apiPut`、`apiDelete` 方法，**禁止在api.ts中定义具体的业务接口**。

```typescript
// ✅ 正确的API调用方式
import { apiGet, apiPost, apiPut, apiDelete } from '@/utils/api'

// 获取小说列表
const getNovels = async (params: { limit?: number; offset?: number } = {}) => {
  const queryParams = new URLSearchParams()
  if (params.limit) queryParams.append('limit', String(params.limit))
  if (params.offset) queryParams.append('offset', String(params.offset))
  
  const url = `/novels${queryParams.toString() ? '?' + queryParams.toString() : ''}`
  return apiGet(url)
}

// 创建小说
const createNovel = async (data: any) => {
  return apiPost('/novels', data)
}
```

**禁止的API定义方式**:
```typescript
// ❌ 禁止在api.ts中定义具体业务接口
export const novelApi = {
  getList(): Promise<ApiResponse> {
    return apiGet('/novels')  // 禁止
  }
}

// ❌ 禁止在api.ts中定义具体的API方法
export const getNovels = () => {  // 禁止
  return apiGet('/novels')
}
```

### 5. 文件上传规范
**重要**: 所有文件上传必须使用 `resources/js/utils/api.ts` 中的 `uploadApi.uploadFile` 方法。

```typescript
// ✅ 正确的文件上传方式
import { uploadApi } from '@/utils/api'

// 上传文件
const uploadFile = async (file: File, options: { folder?: string } = {}) => {
  return uploadApi.uploadFile(file, options)
}

// 使用示例
const result = await uploadFile(file, { folder: 'novels' })
if (result.success) {
  console.log('上传成功:', result.data.url)
}
```

### 6. Toast通知使用规范
**重要**: 所有用户操作反馈必须使用 `useToast` 组合式函数，**禁止使用** `console.log` 或 `alert` 等原生方法。

```typescript
// ✅ 正确的Toast使用方式
import { useToast } from '@/composables/useToast'

const { toast } = useToast()

// 成功提示
toast.success('操作成功')

// 错误提示
toast.error('操作失败')

// 警告提示
toast.warning('请注意')

// 信息提示
toast.info('提示信息')
```

**禁止的使用方式**:
```typescript
// ❌ 禁止使用原生方法
console.log('操作成功')  // 禁止
alert('操作失败')        // 禁止
confirm('确认删除?')     // 禁止
```

### 7. 确认弹窗使用规范
**重要**: 所有需要用户确认的操作必须使用 `useConfirm` 组合式函数和 `ConfirmDialog` 组件，**禁止使用**原生的 `confirm()` 方法。

```typescript
// ✅ 正确的确认弹窗使用方式
import { useConfirm } from '@/composables/useConfirm'

const { confirm } = useConfirm()

// 删除确认
const handleDelete = async (item: any) => {
  const confirmed = await confirm({
    title: '确认删除',
    message: `确定要删除"${item.name}"吗？此操作不可逆。`,
    confirmText: '删除',
    cancelText: '取消',
    variant: 'destructive'
  })
  
  if (confirmed) {
    // 执行删除操作
    await deleteItem(item.id)
  }
}
```

**禁止的使用方式**:
```typescript
// ❌ 禁止使用原生confirm方法
if (!confirm('确定要删除吗？')) return  // 禁止
```

## 项目结构

### 后端目录
```
app/
├── Http/Controllers/Api/     # API控制器
├── Http/Controllers/Auth/    # 认证控制器
├── Models/                   # Eloquent模型
└── Providers/               # 服务提供者
```

### 前端目录
```
resources/js/
├── components/ui/            # 基础UI组件 (强制TS)
├── components/storyboard/    # 分镜画板组件 (强制TS)
├── composables/             # Vue组合式函数 (强制TS)
├── lib/                     # 工具库 (强制TS)
├── pages/                   # 页面组件 (使用JS)
└── types/                   # TypeScript类型定义 (强制TS)
```

## API响应格式
```json
{
    "success": true,
    "data": [],
    "message": "操作成功"
}
```

## 文件上传支持
- **图片**: jpeg, jpg, png, gif, webp
- **视频**: mp4, avi, mov, wmv, flv
- **音频**: mp3, wav, ogg, m4a
- **文档**: pdf, doc, docx, xls, xlsx, ppt, pptx, txt

## 开发命令
- 前端开发: `npm run dev`
- 后端开发: `php artisan serve`
- 队列处理: `php artisan queue:listen`
- 前端构建: `npm run build`

## 注意事项
- 使用TypeScript的代码必须通过类型检查
- 使用JavaScript的代码必须通过ESLint检查
- 使用Prettier + ESLint进行代码格式化
- 遵循语义化Git提交规范
- 优先使用项目提供的组件库和工具函数
- **页面组件统一使用JavaScript，业务组件统一使用TypeScript**

---

**注意**: 本规则文档会随着项目发展持续更新，所有开发人员应遵循最新版本的规范要求。
---
alwaysApply: true
---


# 在线动画项目开发规则

## 项目概述
基于Laravel + Vue3 + TypeScript的全栈Web应用，专注于小说到动画视频的转换和分镜画板制作。

## 技术栈
- **后端**: Laravel 12+, MySQL, Filament Admin Panel
- **前端**: Vue 3 + TypeScript, Vite, Element Plus + Tailwind CSS
- **画布**: Fabric.js + Canvas API
- **动画**: Anime.js, js-yaml

## 核心开发规范

### 1. 后端规范 (PHP/Laravel)
- 遵循PSR-12编码标准
- 控制器方法使用驼峰命名法
- 模型使用单数形式，数据表使用复数形式
- 使用Eloquent ORM进行数据库操作

### 2. 前端规范 (Vue3/TypeScript)
- 使用 `<script setup lang="ts">` 语法
- 组件使用PascalCase命名，文件名使用kebab-case
- 使用Composition API

#### TypeScript使用策略（分层策略）
**强制使用TypeScript**：
- 工具库 (`lib/` 目录)
- 类型定义 (`types/` 目录)
- 组合式函数 (`composables/` 目录)
- 业务组件 (`components/storyboard/` 等)

**使用JavaScript**：
- 页面组件 (`pages/` 目录) - 统一使用JavaScript
- 页面路由文件
- 页面级别的业务逻辑

**注意**: 使用JavaScript的页面必须通过ESLint检查，确保代码质量。

### 3. 数据库规范
- 表名使用复数形式 (users, novels, chapters)
- 主键统一使用 `id` (bigint, auto_increment)
- 外键字段使用 `{table}_id` 格式
- 时间戳字段使用 `created_at`, `updated_at`

## 重要规则

### 1. UI主题使用规范
**禁止使用**自定义颜色值，必须使用框架提供的主题变量。

```css
/* ✅ 正确 */
.component {
  @apply bg-background text-foreground;
  @apply border-border hover:bg-accent;
  @apply text-primary hover:text-primary/80;
}

/* ❌ 禁止 */
.component {
  @apply bg-white text-gray-900;
  @apply border-gray-300 hover:bg-blue-50;
}
```

### 3. 前端组件使用规范
**重要**: 开发前端功能时，必须优先使用 Element Plus 组件库，**禁止重复造轮子**。

#### 3.1 可用UI组件列表
项目使用 Element Plus 组件库，开发时请优先使用以下组件：

**基础组件**:
- `el-button` - 按钮组件（支持多种类型和尺寸）
- `el-input` - 输入框组件
- `el-input-number` - 数字输入框组件
- `el-textarea` - 文本域组件
- `el-select` - 选择器组件
- `el-checkbox` - 复选框组件
- `el-radio` - 单选框组件
- `el-switch` - 开关组件
- `el-slider` - 滑块组件
- `el-time-picker` - 时间选择器
- `el-date-picker` - 日期选择器
- `el-upload` - 上传组件

**布局组件**:
- `el-card` - 卡片容器组件
- `el-divider` - 分割线组件
- `el-row` / `el-col` - 栅格布局组件
- `el-container` / `el-header` / `el-main` / `el-aside` / `el-footer` - 布局容器组件
- `el-space` - 间距组件

**导航组件**:
- `el-breadcrumb` - 面包屑导航
- `el-menu` - 导航菜单
- `el-tabs` - 标签页组件
- `el-dropdown` - 下拉菜单
- `el-steps` - 步骤条组件
- `el-pagination` - 分页组件

**反馈组件**:
- `el-dialog` - 对话框组件
- `el-drawer` - 抽屉组件
- `el-message` - 消息提示组件
- `el-notification` - 通知组件
- `el-tooltip` - 文字提示组件
- `el-popover` - 弹出框组件
- `el-popconfirm` - 气泡确认框组件
- `el-loading` - 加载指令

**数据展示**:
- `el-table` - 表格组件
- `el-tree` - 树形控件
- `el-tag` - 标签组件
- `el-progress` - 进度条组件
- `el-avatar` - 头像组件
- `el-badge` - 徽章组件
- `el-descriptions` - 描述列表组件
- `el-empty` - 空状态组件
- `el-result` - 结果组件
- `el-statistic` - 统计数值组件

#### 3.2 组件使用规范

**✅ 正确的使用方式**:
```vue
<script setup>
// Element Plus 组件无需导入，全局注册后可直接使用
</script>

<template>
  <el-card>
    <template #header>
      <div class="card-header">
        <span>标题</span>
      </div>
    </template>
    <el-input placeholder="请输入内容" />
    <el-button type="primary">确认</el-button>
    <el-pagination
      :total="100"
      :page-size="10"
      :current-page="1"
      @current-change="handlePageChange"
    />
  </el-card>
</template>
```

**❌ 禁止的使用方式**:
```vue
<!-- 禁止自定义按钮样式 -->
<button class="bg-blue-500 text-white px-4 py-2 rounded">确认</button>

<!-- 禁止自定义卡片样式 -->
<div class="bg-white border rounded-lg shadow p-4">内容</div>

<!-- 禁止自定义分页逻辑 -->
<div class="flex space-x-2">
  <button @click="prevPage">上一页</button>
  <span>第 {{ page }} 页</span>
  <button @click="nextPage">下一页</button>
</div>

<!-- 禁止使用其他UI库的组件 -->
<v-btn>按钮</v-btn>
<a-button>按钮</a-button>
```

#### 3.3 组件扩展规范
如果 Element Plus 组件无法满足需求：

1. **优先考虑组合现有组件**：通过组合多个 Element Plus 组件实现复杂功能
2. **使用 Element Plus 的插槽和属性**：充分利用组件的插槽、属性和事件
3. **创建业务组件**：在 `components/` 目录下创建业务相关的复合组件，内部使用 Element Plus 组件
4. **最后才考虑自定义组件**：如果确实需要新的基础UI组件，请基于 Element Plus 的设计规范创建

#### 3.4 组件导入规范
- **Element Plus 组件无需导入**：全局注册后可直接在模板中使用
- **按需导入**：如果使用按需导入方式，请使用 Element Plus 官方推荐的导入方式
- **图标导入**：Element Plus 图标需要单独导入，推荐使用 `@element-plus/icons-vue`
- **统一使用方式**：所有 Element Plus 组件都使用 `el-` 前缀

### 4. 动画脚本规范
- 使用YAML格式编写动画脚本
- 通过 `js-yaml` 库解析
- 支持多种动画格式（新格式优先，旧格式兼容）

### 5. API接口定义规范
**重要**: 前端API调用直接使用 `resources/js/utils/api.ts` 中提供的 `apiGet`、`apiPost`、`apiPut`、`apiDelete` 方法，**禁止在api.ts中定义具体的业务接口**。

```typescript
// ✅ 正确的API调用方式
import { apiGet, apiPost, apiPut, apiDelete } from '@/utils/api'

// 获取小说列表
const getNovels = async (params: { limit?: number; offset?: number } = {}) => {
  const queryParams = new URLSearchParams()
  if (params.limit) queryParams.append('limit', String(params.limit))
  if (params.offset) queryParams.append('offset', String(params.offset))
  
  const url = `/novels${queryParams.toString() ? '?' + queryParams.toString() : ''}`
  return apiGet(url)
}

// 创建小说
const createNovel = async (data: any) => {
  return apiPost('/novels', data)
}
```

**禁止的API定义方式**:
```typescript
// ❌ 禁止在api.ts中定义具体业务接口
export const novelApi = {
  getList(): Promise<ApiResponse> {
    return apiGet('/novels')  // 禁止
  }
}

// ❌ 禁止在api.ts中定义具体的API方法
export const getNovels = () => {  // 禁止
  return apiGet('/novels')
}
```

### 6. 文件上传规范
**重要**: 所有文件上传必须使用 `resources/js/utils/api.ts` 中的 `uploadApi.uploadFile` 方法。

```typescript
// ✅ 正确的文件上传方式
import { uploadApi } from '@/utils/api'

// 上传文件
const uploadFile = async (file: File, options: { folder?: string } = {}) => {
  return uploadApi.uploadFile(file, options)
}

// 使用示例
const result = await uploadFile(file, { folder: 'novels' })
if (result.success) {
  console.log('上传成功:', result.data.url)
}
```

### 7. Toast通知使用规范
**重要**: 所有用户操作反馈必须使用 Element Plus 的 `ElMessage` 组件，**禁止使用** `console.log` 或 `alert` 等原生方法。

```typescript
// ✅ 正确的Toast使用方式
import { ElMessage } from 'element-plus'

// 成功提示
ElMessage.success('操作成功')

// 错误提示
ElMessage.error('操作失败')

// 警告提示
ElMessage.warning('请注意')

// 信息提示
ElMessage.info('提示信息')
```

**禁止的使用方式**:
```typescript
// ❌ 禁止使用原生方法
console.log('操作成功')  // 禁止
alert('操作失败')        // 禁止
confirm('确认删除?')     // 禁止
```

### 8. 确认弹窗使用规范
**重要**: 所有需要用户确认的操作必须使用 Element Plus 的 `ElMessageBox` 组件，**禁止使用**原生的 `confirm()` 方法。

```typescript
// ✅ 正确的确认弹窗使用方式
import { ElMessageBox } from 'element-plus'

// 删除确认
const handleDelete = async (item: any) => {
  try {
    await ElMessageBox.confirm(
      `确定要删除"${item.name}"吗？此操作不可逆。`,
      '确认删除',
      {
        confirmButtonText: '删除',
        cancelButtonText: '取消',
        type: 'warning',
      }
    )
    
    // 用户确认后执行删除操作
    await deleteItem(item.id)
    ElMessage.success('删除成功')
  } catch {
    // 用户取消操作
    ElMessage.info('已取消删除')
  }
}
```

**禁止的使用方式**:
```typescript
// ❌ 禁止使用原生confirm方法
if (!confirm('确定要删除吗？')) return  // 禁止
```

### 9. 文件生成和修改规范
**重要**: 在修改、生成文件时，必须采用分步生成/修改的方式，**禁止一次生成整个文件**，以提高开发效率和代码质量。

## 项目结构

### 后端目录
```
app/
├── Http/Controllers/Api/     # API控制器
├── Http/Controllers/Auth/    # 认证控制器
├── Models/                   # Eloquent模型
└── Providers/               # 服务提供者
```

### 前端目录
```
resources/js/
├── components/storyboard/    # 分镜画板组件 (强制TS)
├── composables/             # Vue组合式函数 (强制TS)
├── lib/                     # 工具库 (强制TS)
├── pages/                   # 页面组件 (使用JS)
└── types/                   # TypeScript类型定义 (强制TS)
```

## API响应格式
```json
{
    "success": true,
    "data": [],
    "message": "操作成功"
}
```

## 文件上传支持
- **图片**: jpeg, jpg, png, gif, webp
- **视频**: mp4, avi, mov, wmv, flv
- **音频**: mp3, wav, ogg, m4a
- **文档**: pdf, doc, docx, xls, xlsx, ppt, pptx, txt

## 开发命令
- 前端开发: `npm run dev`
- 后端开发: `php artisan serve`
- 队列处理: `php artisan queue:listen`
- 前端构建: `npm run build`

## 注意事项
- 使用TypeScript的代码必须通过类型检查
- 使用JavaScript的代码必须通过ESLint检查
- 使用Prettier + ESLint进行代码格式化
- 遵循语义化Git提交规范
- 优先使用 Element Plus 组件库和项目提供的工具函数
- **页面组件统一使用JavaScript，业务组件统一使用TypeScript**
- **所有UI组件必须使用 Element Plus，禁止使用其他UI库或自定义基础组件**

---

**注意**: 本规则文档会随着项目发展持续更新，所有开发人员应遵循最新版本的规范要求。
---

**注意**: 本规则文档会随着项目发展持续更新，所有开发人员应遵循最新版本的规范要求。